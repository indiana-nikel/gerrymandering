p2 = sum(data_all$p_clust1)
p3 = (sum(data_all$p_clust1)^2)-sum(data_all$p_clust1_sq)
new_var1_x <- p1*(p2/p3)
p1 = sum(unlist(diff_clust1_y))
p2 = sum(data_all$p_clust1)
p3 = (sum(data_all$p_clust1)^2)-sum(data_all$p_clust1_sq)
new_var1_y <- p1*(p2/p3)
new_var1 <- c(new_var1_x, new_var1_y)
p1 = sum(unlist(diff_clust2_x))
p2 = sum(data_all$p_clust2)
p3 = (sum(data_all$p_clust2)^2)-sum(data_all$p_clust2_sq)
new_var2_x <- p1*(p2/p3)
p1 = sum(unlist(diff_clust2_y))
p2 = sum(data_all$p_clust2)
p3 = (sum(data_all$p_clust2)^2)-sum(data_all$p_clust2_sq)
new_var2_y <- p1*(p2/p3)
new_var2 <- c(new_var2_x, new_var2_y)
p1 = sum(unlist(diff_clust3_x))
p2 = sum(data_all$p_clust3)
p3 = (sum(data_all$p_clust3)^2)-sum(data_all$p_clust3_sq)
new_var3_x <- p1*(p2/p3)
p1 = sum(unlist(diff_clust3_y))
p2 = sum(data_all$p_clust3)
p3 = (sum(data_all$p_clust3)^2)-sum(data_all$p_clust3_sq)
new_var3_y <- p1*(p2/p3)
new_var3 <- c(new_var3_x, new_var3_y)
# Calculate new phis
phi1 <- length(clust1)/sum(length(clust1), length(clust2), length(clust3))
phi2 <- length(clust2)/sum(length(clust1), length(clust2), length(clust3))
phi3 <- length(clust3)/sum(length(clust1), length(clust2), length(clust3))
new_phis <- c(phi1, phi2, phi3)
# Results
print("Old mu1:")
print(mu1)
print("New mu1:")
print(new_mu1)
print("Old mu2:")
print(mu2)
print("New mu2:")
print(new_mu2)
print("Old mu3:")
print(mu3)
print("New mu3:")
print(new_mu3)
print("Old var1:")
print(var1)
print("New var1:")
print(new_var1)
print("Old var2:")
print(var2)
print("New var2:")
print(new_var2)
print("Old var3:")
print(var3)
print("New var3:")
print(new_var3)
print("Old phis:")
print(phis)
print("New phis:")
print(new_phis)
data_all %>%
ggplot(aes(x=x, y=y, color=assignment)) +
geom_density2d() +
geom_point() +
labs(title="One-Step EM Algorithm\n3 Clusters")
k <- 3
#aic <- -2(ln())+2k
m_clust <- Mclust(data$X)
summary(m_clust, parameters=TRUE)
plot(m_clust, what="density", main="FALSE")
par(new=TRUE)
plot(m_clust, what="classification")
subvotes <- read_rds("data/subvotes.rds")
Country_df <- subvotes %>%
spread(country, vote)
Country_mat <- as.matrix(Country_df[,-1])
rownames(Country_mat) <- Country_df$rcid
#dist_obj <- dist(t(Country_mat), method="euclidean")
#dist_mat <- as.matrix(dist_obj)
# Pulled from: https://stackoverflow.com/questions/31034304/replace-na-values-in-full-dataset-using-r/31034685#31034685, assisted by Jordan Dubchak.
C_mat_modes <- apply(Country_mat, 2, function(x){
x[is.na(x)] <- as.numeric(names(which.max(table(x))))
return(x) })
c_m_clust <- Mclust(C_mat_modes)
plot(c_m_clust, what="BIC")
#plot(country_m_clust, what="density", main="FALSE")
#par(new=TRUE)
#plot(country_m_clust, what="classification")
c_m_clust <- Mclust(C_mat_modes)
plot(c_m_clust, what="classification")
c_m_clust <- Mclust(C_mat_modes)
plot(c_m_clust, what="density")
c_m_clust <- Mclust(C_mat_modes)
plot(c_m_clust, what="BIC")
library(tidyverse)
library(cluster)
library(mclust)
library(factoextra)
install.packages("factoextra")
library(tidyverse)
library(cluster)
library(mclust)
library(factoextra)
set.seed(142857)
subvotes <- read_rds("data/subvotes.rds")
Country_df <- subvotes %>%
spread(country, vote)
Country_mat <- as.matrix(Country_df[,-1])
rownames(Country_mat) <- Country_df$rcid
#dist_obj <- dist(t(Country_mat), method="euclidean")
#dist_mat <- as.matrix(dist_obj)
# Pulled from: https://stackoverflow.com/questions/31034304/replace-na-values-in-full-dataset-using-r/31034685#31034685, assisted by Jordan Dubchak.
C_mat_modes <- apply(Country_mat, 2, function(x){
x[is.na(x)] <- as.numeric(names(which.max(table(x))))
return(x) })
c_m_clust <- Mclust(C_mat_modes)
plot(c_m_clust, what="BIC")
fviz_mclust(country_clust, what="BIC")
plot(c_m_clust, what="BIC")
fviz_mclust(c_m_clust, what="BIC")
fviz_mclust(c_m_clust, geom="point")
c_m_clust <- Mclust(C_mat_modes, G=1:76)
c_m_clust <- Mclust(C_mat_modes, G=1:50)
summary(c_m_clust)
## Collaboration with Jordan Dubchak
fviz_mclust(c_m_clust, what="BIC")
fviz_mclust(c_m_clust, geom="point")
## Collaboration with Jordan Dubchak
fviz_mclust(c_m_clust, what="BIC")
fviz_mclust(c_m_clust, geom="point")
c_m_clust <- Mclust(C_mat_modes, G=1:20)
summary(c_m_clust)
## Collaboration with Jordan Dubchak
fviz_mclust(c_m_clust, what="BIC")
fviz_mclust(c_m_clust, geom="point")
c_m_clust <- Mclust(C_mat_modes, G=1:30)
summary(c_m_clust)
## Collaboration with Jordan Dubchak
fviz_mclust(c_m_clust, what="BIC")
fviz_mclust(c_m_clust, geom="point")
k <- 3
log_lik <- sum(data_all$r1)
#aic <- -2()+2k
log_lik
View(data_all)
## E-Step
# Define responsibility function
biv_resp <- function(phi, mu_x, mu_y, var_x, var_y, x, y){
part_1 <- 1/(2*pi*sqrt(var_x)*sqrt(var_y))
part_2 <- -((x-mu_x)^2)/(2*var_x)
part_3 <- -((y-mu_y)^2)/(2*var_y)
resp <- phi*(part_1*exp(part_2+part_3))
return(resp)
}
# Initialize lists
r_1 <- list()
p_clust1 <- list()
p_clust1_sq <- list()
clust1_x <- list()
clust1_y <- list()
r_2 <- list()
p_clust2 <- list()
p_clust2_sq <- list()
clust2_x <- list()
clust2_y <- list()
r_3 <- list()
p_clust3 <- list()
p_clust3_sq <- list()
clust3_x <- list()
clust3_y <- list()
assignment <- list()
j <- 1
k <- 1
l <- 1
# Loop foor each responsibility and its square, for each cluster
for (i in c(1:length(data$X[,1]))){
r1 <- biv_resp(phis[1], mu1[1], mu1[2], var1[1], var1[2], data$X[i,1], data$X[i,2])
r2 <- biv_resp(phis[2], mu2[1], mu2[2], var2[1], var2[2], data$X[i,1], data$X[i,2])
r3 <-biv_resp(phis[3], mu3[1], mu3[2], var3[1], var3[2], data$X[i,1], data$X[i,2])
r1_norm <- r1/sum(r1, r2, r3)
r2_norm <- r2/sum(r1, r2, r3)
r3_norm <- r3/sum(r1, r2, r3)
r_1[i] <- r1
p_clust1[i] <- r1_norm
p_clust1_sq[i] <- r1_norm^2
r_2[i] <- r2
p_clust2[i] <- r2_norm
p_clust2_sq[i] <- r2_norm^2
r_3[i] <- r3
p_clust3[i] <- r3_norm
p_clust3_sq[i] <- r3_norm^2
if (max(c(p_clust1[[i]], p_clust2[[i]], p_clust3[[i]])) == p_clust1[i]){
assignment[i] <- 1
clust1_x[j] <- data$X[i,1]
clust1_y[j] <- data$X[i,2]
j <- j + 1
} else if (max(c(p_clust1[[i]], p_clust2[[i]], p_clust3[[i]])) == p_clust2[i]){
assignment[i] <- 2
clust2_x[k] <- data$X[i,1]
clust2_y[k] <- data$X[i,2]
k <- k + 1
} else if (max(c(p_clust1[[i]], p_clust2[[i]], p_clust3[[i]])) == p_clust3[i]) {
assignment[i] <- 3
clust3_x[l] <- data$X[i,1]
clust3_y[l] <- data$X[i,2]
l <- l + 1
}
}
# Unlist values for data frame
r_1 <- unlist(r_1)
p_clust1 <- unlist(p_clust1)
p_clust1_sq <- unlist(p_clust1_sq)
r_2 <- unlist(r_2)
p_clust2 <- unlist(p_clust2)
p_clust2_sq <- unlist(p_clust2_sq)
r_13 <- unlist(r_3)
p_clust3 <- unlist(p_clust3)
p_clust3_sq <- unlist(p_clust3_sq)
assignment <- unlist(assignment)
data_all <- data.frame(data$X)
colnames(data_all) <- c("x", "y")
data_all <- cbind(data_all, r_1, r_2, r_3,
p_clust1, p_clust2, p_clust3,
p_clust1_sq, p_clust2_sq, p_clust3_sq,
assignment)
# Data frames for each cluster
clust1_x <- unlist(clust1_x)
clust1_y <- unlist(clust1_y)
clust1 <- cbind(clust1_x, clust1_y)
clust2_x <- unlist(clust2_x)
clust2_y <- unlist(clust2_y)
clust2 <- cbind(clust2_x, clust2_y)
clust3_x <- unlist(clust3_x)
clust3_y <- unlist(clust3_y)
clust3 <- cbind(clust3_x, clust3_y)
## M-Step
# Initialize lists
sum_clust1_x <- list()
sum_clust1_y <- list()
sum_clust2_x <- list()
sum_clust2_y <- list()
sum_clust3_x <- list()
sum_clust3_y <- list()
diff_clust1_x <- list()
diff_clust1_y <- list()
diff_clust2_x <- list()
diff_clust2_y <- list()
diff_clust3_x <- list()
diff_clust3_y <- list()
# Loop for weighted meansand variances for each variable and each dimension
for (i in c(1:length(data$X[,1]))){
sum_clust1_x[i] <- data_all$x[i] * data_all$p_clust1[i]
sum_clust1_y[i] <- data_all$y[i] * data_all$p_clust1[i]
sum_clust2_x[i] <- data_all$x[i] * data_all$p_clust2[i]
sum_clust2_y[i] <- data_all$y[i] * data_all$p_clust2[i]
sum_clust3_x[i] <- data_all$x[i] * data_all$p_clust3[i]
sum_clust3_y[i] <- data_all$y[i] * data_all$p_clust3[i]
diff_clust1_x[i] <- data_all$p_clust1[i] * (data_all$x[i] - mu1[1])^2
diff_clust1_y[i] <- data_all$p_clust1[i] * (data_all$y[i] - mu1[2])^2
diff_clust2_x[i] <- data_all$p_clust2[i] * (data_all$x[i] - mu2[1])^2
diff_clust2_y[i] <- data_all$p_clust2[i] * (data_all$y[i] - mu2[2])^2
diff_clust3_x[i] <- data_all$p_clust3[i] * (data_all$x[i] - mu3[1])^2
diff_clust3_y[i] <- data_all$p_clust3[i] * (data_all$y[i] - mu3[2])^2
}
# Calculate new mu's and var's
new_mu1 <- c(sum(unlist(sum_clust1_x))/sum(data_all$p_clust1), sum(unlist(sum_clust1_y))/sum(data_all$p_clust1))
new_mu2 <- c(sum(unlist(sum_clust2_x))/sum(data_all$p_clust2), sum(unlist(sum_clust2_y))/sum(data_all$p_clust2))
new_mu3 <- c(sum(unlist(sum_clust3_x))/sum(data_all$p_clust3), sum(unlist(sum_clust3_y))/sum(data_all$p_clust3))
p1 = sum(unlist(diff_clust1_x))
p2 = sum(data_all$p_clust1)
p3 = (sum(data_all$p_clust1)^2)-sum(data_all$p_clust1_sq)
new_var1_x <- p1*(p2/p3)
p1 = sum(unlist(diff_clust1_y))
p2 = sum(data_all$p_clust1)
p3 = (sum(data_all$p_clust1)^2)-sum(data_all$p_clust1_sq)
new_var1_y <- p1*(p2/p3)
new_var1 <- c(new_var1_x, new_var1_y)
p1 = sum(unlist(diff_clust2_x))
p2 = sum(data_all$p_clust2)
p3 = (sum(data_all$p_clust2)^2)-sum(data_all$p_clust2_sq)
new_var2_x <- p1*(p2/p3)
p1 = sum(unlist(diff_clust2_y))
p2 = sum(data_all$p_clust2)
p3 = (sum(data_all$p_clust2)^2)-sum(data_all$p_clust2_sq)
new_var2_y <- p1*(p2/p3)
new_var2 <- c(new_var2_x, new_var2_y)
p1 = sum(unlist(diff_clust3_x))
p2 = sum(data_all$p_clust3)
p3 = (sum(data_all$p_clust3)^2)-sum(data_all$p_clust3_sq)
new_var3_x <- p1*(p2/p3)
p1 = sum(unlist(diff_clust3_y))
p2 = sum(data_all$p_clust3)
p3 = (sum(data_all$p_clust3)^2)-sum(data_all$p_clust3_sq)
new_var3_y <- p1*(p2/p3)
new_var3 <- c(new_var3_x, new_var3_y)
# Calculate new phis
phi1 <- length(clust1)/sum(length(clust1), length(clust2), length(clust3))
phi2 <- length(clust2)/sum(length(clust1), length(clust2), length(clust3))
phi3 <- length(clust3)/sum(length(clust1), length(clust2), length(clust3))
new_phis <- c(phi1, phi2, phi3)
# Results
print("Old mu1:")
print(mu1)
print("New mu1:")
print(new_mu1)
print("Old mu2:")
print(mu2)
print("New mu2:")
print(new_mu2)
print("Old mu3:")
print(mu3)
print("New mu3:")
print(new_mu3)
print("Old var1:")
print(var1)
print("New var1:")
print(new_var1)
print("Old var2:")
print(var2)
print("New var2:")
print(new_var2)
print("Old var3:")
print(var3)
print("New var3:")
print(new_var3)
print("Old phis:")
print(phis)
print("New phis:")
print(new_phis)
k <- 3
log_lik <- sum(data_all$r1)
#aic <- -2()+2k
log_lik
k <- 3
log_lik <- sum(data_all$r_1)
#aic <- -2()+2k
log_lik
k <- 3
log_lik <- sum(data_all$r_1, data_all$r_2, data_all$r_3)
#aic <- -2()+2k
log_lik
k <- 3
log_lik <- ln(sum(data_all$r_1, data_all$r_2, data_all$r_3))
k <- 3
log_lik <- log(sum(data_all$r_1, data_all$r_2, data_all$r_3), base=exp(1))
#aic <- -2()+2k
log_lik
k <- 3
log_lik <- log(sum(data_all$r_1, data_all$r_2, data_all$r_3), base=exp(1))
aic <- -2(log_lik)+2k
k <- 3
log_lik <- log(sum(data_all$r_1, data_all$r_2, data_all$r_3), base=exp(1))
aic <- -2(log_lik)+2*k
k <- 3
log_lik <- log(sum(data_all$r_1, data_all$r_2, data_all$r_3), base=exp(1))
aic <- -2*(log_lik)+2*k
aic
k <- 3
log_lik <- 0
for (i in c(1:length(data$X[,1]))){
log_lik <- log_lik + (log(sum(data_all$r_1[i],
data_all$r_2[i],
data_all$r_3[i]), base=exp(1)))
}
aic <- -2*(log_lik)+2*k
aic
k <- 3
log_lik <- list()
for (i in c(1:length(data$X[,1]))){
log_lik[i] <- log(sum(data_all$r_1[i],
data_all$r_2[i],
data_all$r_3[i]), base=exp(1)))
k <- 3
log_lik <- list()
for (i in c(1:length(data$X[,1]))){
log_lik[i] <- log(sum(data_all$r_1[i],
data_all$r_2[i],
data_all$r_3[i]), base=exp(1))
}
log_lik_sum <- sum(unlist(log_like))
k <- 3
log_lik <- list()
for (i in c(1:length(data$X[,1]))){
log_lik[i] <- log(sum(data_all$r_1[i],
data_all$r_2[i],
data_all$r_3[i]), base=exp(1))
}
log_lik_sum <- sum(unlist(log_lik))
aic <- -2*(log_lik_sum)+2*k
aic
k <- 3
log_lik <- list()
for (i in c(1:length(data$X[,1]))){
log_lik[i] <- log(sum(data_all$r_1[i],
data_all$r_2[i],
data_all$r_3[i]), base=exp(1))
}
log_lik_sum <- sum(unlist(log_lik))
log_lik_sum
aic <- -2*(log_lik_sum)+2*k
aic
k <- 3
log_lik <- list()
for (i in c(1:length(data$X[,1]))){
log_lik[i] <- log(sum(data_all$r_1[i],
data_all$r_2[i],
data_all$r_3[i]), base=exp(1))
}
log_lik_sum <- sum(unlist(log_lik))
aic <- -2*(log_lik_sum)+2*k
aic
k <- 3
log_lik <- list()
for (i in c(1:length(data$X[,1]))){
log_lik[i] <- log(sum(data_all$r_1[i],
data_all$r_2[i],
data_all$r_3[i]), base=exp(1))
}
log_lik_sum <- sum(unlist(log_lik))
aic <- -2*(log_lik_sum)+2*k
print(paste("AIC:", aic))
shiny::runApp('USA_Map')
runApp('USA_Map')
runApp('USA_Map')
runApp('USA_Map')
runApp('USA_Map')
install.packages("shinydashboard")
full_map <- left_join(map_data("state"), summary_tab, by=c("region"="state"))
library(shiny)
library(tidyverse)
library(maps)
usa_map <- map_data("state")
initial <- map_data("state") %>% filter(region=="oregon")
summary_tab <- read.csv("state_summary.csv")
getwd()
setwd("/home/indiana-nikel/gerrmyandering/application/gerrymandering_app")
setwd("/home/indiana-nikel/gerrymandering/application/gerrymandering_app")
setwd("/home/indiana-nikel/repo/gerrymandering/application/gerrymandering_app")
library(shiny)
library(tidyverse)
library(maps)
usa_map <- map_data("state")
initial <- map_data("state") %>% filter(region=="oregon")
summary_tab <- read.csv("state_summary.csv")
full_map <- left_join(map_data("state"), summary_tab, by=c("region"="state"))
View(usa_map)
View(summary_tab)
full_map <- left_join(map_data("state"), summary_tab, by=c("region"="states"))
View(full_map)
library(shiny)
library(tidyverse)
library(maps)
usa_map <- map_data("state")
initial <- map_data("state") %>% filter(region=="oregon")
summary_tab <- read.csv("state_summary.csv")
full_map <- left_join(map_data("state"), summary_tab, by=c("region"="states"))
View(full_map)
runApp()
runApp()
runApp()
runApp()
View(full_map)
runApp()
library(shiny)
library(tidyverse)
library(maps)
usa_map <- map_data("state")
summary_tab <- read.csv("state_summary.csv")
full_map <- left_join(map_data("state"), summary_tab, by=c("region"="states"))
initial <- full_map  %>% filter(region=="oregon")
View(full_map)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(full_map)
full_county <- left_join(map_data("county"), summary_tab, by=c("region"="states"))
county_sub <- subset(full_county, region == "oregon")
View(full_county)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
full_map <- left_join(map_data("state"), summary_tab, by=c("region"=as.factor("states")))
runApp()
runApp()
runApp()
runApp()
